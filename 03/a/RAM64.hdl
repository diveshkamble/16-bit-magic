// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=dMuxA, b=dMuxB, c=dMuxC, d=dMuxD, e=dMuxE, f=dMuxF, g=dMuxG, h=dMuxH);
    RAM8(in=in, load=dMuxA, address=address[3..5], out=regOutA);
    RAM8(in=in, load=dMuxB, address=address[3..5], out=regOutB);
    RAM8(in=in, load=dMuxC, address=address[3..5], out=regOutC);
    RAM8(in=in, load=dMuxD, address=address[3..5], out=regOutD);
    RAM8(in=in, load=dMuxE, address=address[3..5], out=regOutE);
    RAM8(in=in, load=dMuxF, address=address[3..5], out=regOutF);
    RAM8(in=in, load=dMuxG, address=address[3..5], out=regOutG);
    RAM8(in=in, load=dMuxH, address=address[3..5], out=regOutH);
    Mux8Way16(a=regOutA, b=regOutB, c=regOutC, d=regOutD, e=regOutE, f=regOutF, g=regOutG, h=regOutH, sel=address[0..2], out=out);
}